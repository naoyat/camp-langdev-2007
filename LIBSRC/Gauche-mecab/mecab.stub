;;;
;;; mecab.stub - MeCab binding
;;;
;;;   Copyright (c) 2004 Kimura Fuyuki, All rights reserved.
;;;
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;
;;;  $Id: mecab.stub,v 1.5 2004/08/30 03:11:40 fuyuki Exp $
;;;

"
 #include <gauche/extend.h>
 #include <mecab.h>

 typedef struct ScmMeCabRec {
   SCM_HEADER;
   mecab_t *m; /* NULL if closed */
 } ScmMeCab;

 SCM_CLASS_DECL(Scm_MeCabClass);
 #define SCM_CLASS_MECAB (&Scm_MeCabClass)
 #define SCM_MECAB(obj) ((ScmMeCab*)(obj))
 #define SCM_MECABP(obj) (SCM_XTYPEP(obj, SCM_CLASS_MECAB))

 /* Hack for initialization stub */
 static void internal_init(ScmModule*);
 void Scm_Init_mecab(void)
 {
   ScmModule *mod;
   SCM_INIT_EXTENSION(mecab);
   mod = SCM_MODULE(SCM_FIND_MODULE(\"mecab\", TRUE));
   internal_init(mod);
 }
 #define Scm_Init_mecab internal_init

 static void mecab_finalize(ScmObj obj, void *data)
 {
   ScmMeCab *m = SCM_MECAB(obj);
   if (m->m != NULL) { mecab_destroy(m->m); m->m = NULL; }
 }
"

(define-cclass <mecab> "ScmMeCab*" "Scm_MeCabClass"
  ()
  ())

(define-cproc mecab-new2 (arg::<string>)
  "  ScmMeCab *m = SCM_NEW(ScmMeCab);
  SCM_SET_CLASS(m, SCM_CLASS_MECAB);
  m->m = mecab_new2((char*) Scm_GetStringConst(arg));
  if (m->m == NULL) Scm_Error(mecab_strerror(NULL));
  Scm_RegisterFinalizer(SCM_OBJ(m), mecab_finalize, NULL);
  SCM_RETURN(SCM_OBJ(m));")

(define-cproc mecab-destroy (m::<mecab>)
  "  if (m->m != NULL) {
    mecab_destroy(m->m);
    m->m = NULL;
  }
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc mecab-destroyed? (m::<mecab>)
  "  SCM_RETURN(SCM_MAKE_BOOL(m->m == NULL));")

(define-cproc mecab-strerror (m::<mecab>)
  "  SCM_RETURN(SCM_MAKE_STR_COPYING(mecab_strerror(m->m)));")

(define-cproc mecab-sparse-tostr (m::<mecab> str::<string>)
  " char *r = mecab_sparse_tostr(m->m, (char*) Scm_GetStringConst(str));
  if (r != NULL)
    SCM_RETURN(SCM_MAKE_STR_COPYING(r));
  else
    SCM_RETURN(SCM_FALSE);")

;; Local variables:
;; mode: scheme
;; end:
